.. _py-DGFlow:

**********************************************************
DGFlow
**********************************************************
.. default-domain:: py

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``DGFlow``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlow

    A :class:`DGFlow` object represents a flow model on a given derivation graph.
    A model consists of a set of extensions with the Base extension modelling the edge flow and input/output flow.
    Each extension is accessed using proxy objects returned by the main model class.

    .. py:attribute:: id

        The unique instance id for the :class:`DGFlow` object.

        :type: unsigned int
    .. py:attribute:: dg

        The underlying derivation graph.

        :type: :class:`DG`
    .. py:method:: addSource(g)

        :param g: the graph to be added as a source in the model.
        :type g: :class:`Graph`
    .. py:method:: addSink(g)

        :param g: the graph to be added as a sink in the model.
        :type g: :class:`Graph`
    .. py:attribute:: allowHyperLoops

        Control or query whether or not flow is allowed through loop hyper-edges.
        I.e., hyperedges with identical left and right side.

        :type: bool

        :note: This setting may be changed when certain modules are enabled.
    .. py:attribute:: allowReverse

        Controls whether or not flow in solutions may go through
        one derivation and then directly afterwards the reverse derivation.

        :type: bool

        :note: This setting may be modified when certain modules are enabled.
    .. py:attribute:: allowIOReverse

        Controls whether or not flow in solutions may go through
        an input edge and directly afterwards through the corresponding output edge.

        :type: bool

        :note: This setting may be modified when certain modules are enabled.
    .. py:attribute: relaxed

        Controls whether the core variables are integer or continuous.
        The default is ``False``, meaning integer. Using the relaxed model significantly
        changes the meaning of solutions, and many features may break.
        This feature is only here to provide an easy way to emulated flux balance analysis.

        :type: bool
    .. py:attribute:: transit

        Access the transit extension.

        :type: :class:`DGFlowTransit`
    .. py:attribute:: overallAutocatalysis

        Access the overall autocatalysis extension.

        :type: :class:`DGFlowOverallAutocatalysis`
    .. py:attribute:: overallCatalysis

        Access the overall catalysis extension.

        :type: :class:`DGFlowOverallCatalysis`
    .. py:method:: addConstraint(c)

        :param c: the linear constraint to add to the model (see :ref:`DGFlowLinExpAndConstraints-label`).
        :type c: :class:`DGFlowLinConstraint`
    .. py:attribute:: vertexFilter

        (Write-only) Predicate controlling which vertices of the derivation graph may have flow through them.

        Example: setting ``vertexFilter`` to ``lambda g: g.numVertices <= 42`` will effectively exclude all
        graphs with more than 42 vertices from the derivation graph.

        :type: bool(:class:`Graph`) or bool
    .. py:attribute:: objectiveFunction

        (Write-only) The objective function for the model, which will be minimized.

        :type: :class:`DGFlowLinExp` (see :ref:`DGFlowLinExpAndConstraints-label`)
    .. py:method:: listModel()

        List the model with all settings.
    .. py:method:: setSolverEnumerateBy(absGap=2**30, maxNumSolutions=2**30)

        Sets a new solver for the model. This is the default solver, with ``maxNumSolutions=1``.

        :param int absGap: A solution is only feasible if its objective value is at most ``absGap`` above the optimal value.
        :param maxNumSolutions: The maximum number of solutions to find when solving.
        :type maxNumSolutions: unsigned int
    .. py:method:: dump()

        Exports the object with all solutions to a file.

        :returns: the filename with the exported model.
        :rtype: string
    .. py:method:: calc()

        Locks the model and solves it.
    .. py:attribute:: solutions

        (Read-only) After solving, this is all the found solutions.

        :type: :class:`DGFlowSolutionSet`
.. py:function:: dgFlow(dg)

    Construct a default initialized flow model.

    :param dg: the derivation graph which the flow model should model.
    :type: :class:`DG`
    :returns: a flow model.
    :rtype: :class:`DGFlow`
.. py:function:: dgFlowDump(dg, f)

    Load a previously dumped model with solutions.

    :param dg: the derivation graph which the dumped flow model is build upon.
    :type: :class:`DG`
    :param string f: name of the file with the model to be loaded.
    :returns: a flow model with solutions.
    :rtype: :class:`DGFlow`

Class ``DGFlowTransit``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlowTransit

    .. py:method:: printGraph(g)

        :param g: the graph representing the vertex in the derivation graph which should be printed.
        :type g: :class:`Graph`


Class ``DGFlowOverallAutocatalysis``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlowOverallAutocatalysis

    .. py:method:: enable()

        Enable the extension. This will also enable the transit extension and configure it to
        disallow direct flow through inverse edges, both internal and input/output.
    .. py:attribute:: forceExistence

        Controls whether or not a solution must be overall autocatalytic.
        
        :type: bool
    .. py:attribute:: strictTransit

        Controls whether transit flow in overall autocatalytic vertices is restricted or not.
        
        :type: bool
    .. py:attribute:: bfsExclusive

        Controls whether or not vertices must be exclusively overall autocatalytic,
        as determined by breadth-first marking.
        
        :type: bool


Class ``DGFlowOverallCatalysis``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlowOverallCatalysis

    .. py:method:: enable()

        Enable the extension. This will also enable the transit extension and configure it to
        disallow direct flow through inverse edges, both internal and input/output.
    .. py:attribute:: forceExistence

        Controls whether or not a solution must be overall catalytic.
        
        :type: bool
    .. py:attribute:: strictTransit

        Controls whether transit flow in overall catalytic vertices is restricted or not.
        
        :type: bool

.. _DGFlowLinExpAndConstraints-label:

Linear Expressions and Constraints
-------------------------------------

Linear expressions (:class:`DGFlowLinExp`) and constraints (:class:`DGFlowLinConstraint`)
can be implicitly created from variable specifiers and operators, meaning one rarely
need to instantiate them explicitly.
However creating the zero-expression might sometimes be useful (e.g., in a sum expression)
and can be done simply with the expression ``DGFlowLinExp()``.

A variable specifier is a representation of either a single ILP variable or a sum of ILP variables.
The addition, multiplication and division operators are overloaded for variable specifiers and
linear expressions such that expressions can be written in the natural manner.

The operators ``<=``, ``==`` and ``>=`` are overloaded on linear expressions to make the creation of
linear constraints easier. However, one argument to the operator must be a linear expression while
the other argument must be a number.

All variable specifiers are defined in module scope. See :ref:`dgFlowCommon` for an overview of the specifiers.


Class ``DGFlowSequenceQuery``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlowSequenceQuery

    Representation of a query for a flow sequence.

    .. py:method:: __init__(self)

        Construct a query with multiplicity 1 and no borrowing.
    .. py:attribute:: multiplicity

        Access the multiplicity of the query. It must be at least 1.

        :type: uint
    .. py:method:: __getitem__(self, g)

        :param g: a graph representing a vertex in the derivation graph the query is intended for.
        :type g: :class:`Graph`
        :return: the amount of flow allowed to be borrowed at the vertex represented by the graph.
        :rtype: uint
    .. py:method:: __setitem__(self, g, count)

        Set the amount of flow allowed to be borrowed at the vertex represented by the graph.
        :param g: a graph representing a vertex in the derivation graph the query is intended for.
        :type g: :class:`Graph`
        :param uint count: the amount of tokens
    .. py:attribute:: constrainRouting

        Access whether routing edges must conform to the flow. Setting this to ``false`` may give sequences violating flow constraints.

Class ``DGFlowSolution``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlowSolution


    .. py:attribute:: id

        (Read-only) An id for the solution which is unique among all solutions from the parent :class:`DGFlow` object.

        :type: unsigned int
    .. py:attribute:: dgFlow

        (Read-only) The flow model that produced this solution.

        :type: :class:`DGFlow`
    .. py:method:: eval(exp)

        :returns: the value of the given linear expression evaluated on the solution.
        :param exp: the linear expression to be evaluated on the solution.
        :type exp: :class:`DGFlowLinExp`
        :rtype: double
    .. py:method:: print(printer=DGFlowPrinter(), data=None)
        
        Print the solution using the settings in the given printer and the structure information in the data object.
        
        :param printer: the printer to use governing the appearance.
        :type printer: :class:`DGFlowPrinter`
        :param data: the extra data to use encoding the structure of the graph.
        :type data: :class:`DGPrintData`
    .. py:method:: haxListDerivations()
        
        List the solution in more human readable form.
        Don't expect this function to stay in this form.
        

Class ``DGFlowSolutionSet``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlowSolutionSet
    
    A class representing the set of solutions from a single model.

    .. py:attribute:: dgFlow
        
        (Read-only) The flow model that produced these solutions.
        
        :type: :class:`DGFlow`
    .. py:method:: list()
        
        List overall information about each solution.
        
    .. py:attribute:: size
        
        The number of solutions in the flow model.
        
        :type: unsigned int
    .. py:method:: print(printer=DGFlowPrinter(), data=None)
        
        Print solutions using the settings in the given printer and the structure information in the data object.
        
        :param printer: the printer to use governing the appearance.
        :type printer: :class:`DGFlowPrinter`
        :param data: the extra data to use encoding the structure of the graph.
        :type data: :class:`DGPrintData`
    .. py:method:: printVectors()
        
        (Deprecated) Print some solution data in an old format.
        Use the :meth:`DGFlow.dump` instead.
        

Other
^^^^^

The solution set class additionally supports indexing to retrieve
specific solutions and iteration over the range of solutions.
E.g., the following iterates through each solution in the flow model ``flow``:

.. code-block:: python
    
    for sol in flow.solutions:
        pass


Class ``DGFlowPrinter``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: DGFlowPrinter

    An object of this class holds information on how derivation graphs with flow are visualised.

    .. py:attribute:: dgPrinter

        (Read-only) Retrieve the :class:`DGPrinter` used when printing solutions.

        :type: :class:`DGPrinter`
    .. py:attribute:: withFlowLabels

        Control whether or not a flow label is appended to each hyperedge label (see also :meth:`DGPrinter.pushEdgeLabel`). 

        :type: bool
    .. py:method:: pushInOutEdgeLabel(f)

        Add another function for in-/out-edge labelling.
        The result of this function is appended to each label using the edge label separator
        of the underlying :class:`DGPrinter`.
        The last argument given to the function is ``true`` for the in-edge, and ``false`` for the out-edge.
        
        :param f: the function to push for labelling in-/out-edges.
        :type f: string(:class:`Graph`, :class:`DG`, bool)
    .. py:method:: popInOutEdgeLabel()

        Remove the last pushed in/out edge labelling function.
    .. py:attribute:: printUnfiltered

        Control whether or not the unfiltered version of a solution is printed.

        :type: bool
    .. py:attribute:: printFiltered

        Control whether or not the filtered version of a solution is printed.

        :type: bool
    .. py:attribute:: colourUnfiltered

        Control whether or not the vertices and edges with non-zero flow are coloured in the unfiltered version of solutions.

        :type: bool
