.. _py-Graph:

**********************************************************
Graph
**********************************************************
.. default-domain:: py

.. py:currentmodule:: mod
.. cpp:namespace:: mod


Class ``Graph``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: Graph

    This class models an undirected graph with labels on vertices and edges,
    without loops and without parallel edges.
    Certain labels are regarded as models of chemical atoms and bonds.
    See :ref:`mol-enc` for more information on this.

    .. py:attribute:: id

        (Read-only) A unique instance id among :class:`Graph` objects.

        :type: int
    .. py:attribute:: numVertices

        (Read-only) The number of vertices in the graph.

        :type: int
    .. py:attribute:: vertices

        (Read-only) An iterable of all vertices in the graph.

        :type: :py:class:`GraphVertexRange`
    .. py:attribute:: numEdges

        (Read-only) The number of edges in the graph.

        :type: int
    .. py:attribute:: edges

        (Read-only) An iterable of all edges in the graph.

        :type: :py:class:`GraphEdgeRange`
    .. py:method:: print()
                   print(first, second=None)

        Print the graph, using either the default options or the options in ``first`` and ``second``.

        :param first: the printing options used for the first depiction.
        :type first: :class:`GraphPrinter`
        :param second: the printing options used for the second depiction.
            If it is ``None`` then it is set to``first``.
        :type second: :class:`GraphPrinter`
        :returns: the names for the PDF-files that will be compiled in post-processing.
        :rtype: (string, string)
    .. py:method:: getGMLString(withCoords=False)

        :returns: the :ref:`GML <graph-gml>` representation of the graph,
                  optionally with generated 2D coordinates.
        :rtype: string
        :raises: :py:class:`LogicError` when coordinates are requested, but
                 none can be generated.
    .. py:method:: printGML(withCoords=False)

        Print the :ref:`GML <graph-gml>` representation of the graph,
        optionally with generated 2D coordinates.

        :returns: the filename of the printed GML file.
        :rtype: string
        :raises: :py:class:`LogicError` when coordinates are requested, but
                 none can be generated.
    .. py:attribute:: name

        The name of the graph. The default name includes the unique instance id.

        :type: string
    .. py:attribute:: smiles

        (Read-only) If the graph models a molecule, this is the canonical :ref:`SMILES string <graph-smiles>` for it.

        :type: string
    .. py:attribute:: graphDFS

        (Read-only) This is the :ref:`GraphDFS <graph-graphDFS>` of the graph.

        :type: string
    .. py:attribute:: linearEncoding

        (Read-only) If the graph models a molecule this is the :ref:`SMILES string <graph-smiles>` string, otherwise it is the :ref:`GraphDFS <graph-graphDFS>` string.

        :type: string
    .. py:attribute:: isMolecule

        (Read-only) Whether or not the graph models a molecule. See :ref:`mol-enc`.

        :type: bool
    .. py:attribute:: energy

        (Read-only) If the graph models a molecule, this is some energy value.
        The energy is calculated using Open Babel, unless already calculated or cached by :py:meth:`Graph.cacheEnergy`.

        :type: double
    .. py:method:: cacheEnergy(e)

        If the graph models a molecule, sets the energy to a given value.

        :param double e: the value for the energy to be set.
    .. py:attribute:: molarMass

        (Read-only) If the graph models a molecule, this is the molar mass of the molecule as calculated by Open Babel.

        :type: double
    .. py:method:: vLabelCount(label)

        :param string label: some label for querying.
        :returns: the number of vertices in the graph with the given label.
        :rtype: unsigned int
    .. py:method:: eLabelCount(label)
    
        :param string label: some label for querying.
        :returns: the number of edges in the graph with the given label.
        :rtype: unsigned int
    .. py:method:: isomorphism(other, maxNumMatches=1)
    
        :param other: the codomain :class:`Graph` for finding morphisms.
        :type other: :class:`Graph`
        :param maxNumMatches: the maximum number of isomorphisms to search for.
        :type maxNumMatches: :cpp:any:`std::size_t`
        :returns: the number of isomorphisms from this graph to ``other``, but at most ``maxNumMatches``.
        :rtype: :cpp:any:`std::size_t`
    .. py:method:: monomorphism(other, maxNumMatches=1)
    
        :param other: the codomain :class:`Graph` for finding morphisms.
        :type host: :class:`Graph`
        :param maxNumMatches: the maximum number of monomorphisms to search for.
        :type maxNumMatches: :cpp:any:`std::size_t`
        :returns: the number of monomorphisms from this graph to ``other``, though at most ``maxNumMatches``.
        :rtype: :cpp:any:`std::size_t`
    .. py:method:: makePermutation()

        :returns: a graph isomorphic to this, but with the vertex indices randomly permuted.
        :rtype: :py:class:`Graph`
    .. py:attribute:: image

        (Write-only) A custom depiction for the graph. The depiction file used will be the string
        returned by the given function, with ``.pdf`` appended.
        The function will only be called once.

        :type: string()
    .. py:attribute:: imageCommad

        A command to be run in post-processing if a custom depiction is set.
        The command is only run once.

        :type: string
.. py:method:: graphGMLString(s, name=None)

    Load a graph in :ref:`GML <graph-gml>` format from a given string.

    :param string d: the string with the :ref:`GML <graph-gml>` data to load from.
    :param string name: the name of the graph. If none is given the default name is used.
    :returns: the loaded graph.
    :rtype: :class:`Graph`
    :raises: :class:`InputError` on bad input.
.. py:method:: graphGML(f, name=None)

    Load a graph in :ref:`GML <graph-gml>` format from a given file.

    :param string f: name of the :ref:`GML <graph-gml>` file to be loaded.
    :param string name: the name of the graph. If none is given the default name is used.
    :returns: the loaded graph.
    :rtype: :class:`Graph`
    :raises: :class:`InputError` on bad input.
.. py:method:: graphDFS(s, name=None)

    Load a graph from a :ref:`GraphDFS <graph-graphDFS>` string.

    :param string s: the :ref:`GraphDFS <graph-graphDFS>` string to parse.
    :param string name: the name of the graph. If none is given the default name is used.
    :returns: the loaded graph.
    :rtype: :class:`Graph`
    :raises: :class:`InputError` on bad input.
.. py:method:: smiles(s, name=None)

    Load a molecule from a :ref:`SMILES <graph-smiles>` string.

    :param string s: the :ref:`SMILES <graph-smiles>` string to parse.
    :param string name: the name of the graph. If none is given the default name is used.
    :returns: the loaded molecule.
    :rtype: :class:`Graph`
    :raises: :class:`InputError` on bad input.

Class ``GraphVertex``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: GraphVertex

    A descriptor of either a vertex in a graph, or a null vertex.

    .. py:function:: __init__(self)

        Constructs a null descriptor.
    .. py:attribute:: id

        (Read-only) The index of the vertex. It will be in the range :math:`[0, numVertices[`.

        :type: int
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: graph

        (Read-only) The graph the vertex belongs to.

        :type: :py:class:`Graph`
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: degree

        (Read-only) The degree of the vertex.

        :type: int
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: incidentEdges

        (Read-only) A range of incident edges to this vertex.

        :type: :py:class:`IncidentEdgeRange`
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: stringLabel

        (Read-only) The string label of the vertex.

        :type: string
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: atomId

        (Read-only) The atom id of the vertex.

        :type: :py:class:`AtomId`
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: charge

        (Read-only) The charge of the vertex.

        :type: :py:class:`Charge`
        :raises: :py:class:`LogicError` if it is a null descriptor.

Class ``GraphEdge``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: GraphEdge

    A descriptor of either an edge in a graph, or a null edge.

    .. py:function:: __init__(self)

        Constructs a null descriptor.
    .. py:attribute:: graph

        (Read-only) The graph the edge belongs to.

        :type: :py:class:`Graph`
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: source

        (Read-only) The source vertex of the edge.

        :type: :py:class:`GraphVertex`
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. attribute:: target

        (Read-only) The target vertex of the edge.

        :type: :py:class:`GraphVertex`
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: stringLabel

        (Read-only) The string label of the edge.

        :type: string
        :raises: :py:class:`LogicError` if it is a null descriptor.
    .. py:attribute:: bondType

        (Read-only) The bond type of the edge.

        :type: :py:class:`BondType`
        :raises: :py:class:`LogicError` if it is a null descriptor.

Class ``GraphPrinter``
--------------------------------------------------------------------------------------------------------------------------------

.. py:class:: GraphPrinter

    This class is used to configure how graphs are visualised.

    .. warning:: Some of these options greatly alter how graphs are depicted
        and the result may not accurately represent the underlying graph,
        and may make non-molecules look like molecules.

    .. py:method:: __init__(self)

        The default constructor enables edges as bonds and raised charges.
    .. py:method:: setMolDefault()

        Shortcut for enabling all but thickening and index printing.
    .. py:method:: setReactionDefault()

        Shortcut for enabling all but thickening, index printing and simplification of carbon atoms.
    .. py:method:: disableAll()

        Disable all special printing features.
    .. py:method:: enableAll()

        Enable all special printing features, except typewriter font.
    .. py:attribute:: edgesAsBonds

        Control whether edges with special labels are drawn as chemical bonds.

        :type: bool
    .. py:attribute:: collapseHydrogens

        Control whether vertices representing hydrogen atoms are collapsed into their neighbours labels.

        :type: bool
    .. py:attribute:: raiseCharges

        Control whether a vertex label suffix encoding a charge is written as a superscript to the rest of the label.

        :type: bool
    .. py:attribute:: simpleCarbons

        Control whether some vertices encoding carbon atoms are depicted without any label.

        :type: bool
    .. py:attribute:: thick

        Control whether all edges are drawn thicker than normal and all labels are written in bold.

        :type: bool
    .. py:attribute:: withColour

        Control whether colour is applied to certain elements of the graph which are molecule-like.

        :type: bool
    .. py:attribute:: withIndex

        Control whether the underlying indices of the vertices are printed.

        :type: bool
    .. py:attribute:: withTexttt

        Control whether the vertex and edge labels are written with typewriter font.

        :type: bool
