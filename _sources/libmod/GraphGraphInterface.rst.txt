.. _cpp-GraphGraphInterface:

**********************************************************
GraphGraphInterface.h
**********************************************************
.. default-domain:: cpp

.. py:currentmodule:: mod
.. cpp:namespace:: mod

This header contains the defintinos for the graph interface for :cpp:class:`mod::Graph`.


Class ``Graph::Vertex``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::Vertex
    

    A descriptor of either a vertex in a graph, or a null vertex.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Graph::Vertex {
        friend class Graph;
        friend class Edge;
        friend class VertexIterator;
        friend class VertexRange;
        Vertex(std::shared_ptr<Graph> g, std::size_t vId);
    public:
        Vertex();
        friend std::ostream &operator<<(std::ostream &s, const Vertex &v);
        friend bool operator==(const Vertex &v1, const Vertex &v2);
        friend bool operator!=(const Vertex &v1, const Vertex &v2);
        friend bool operator<(const Vertex &v1, const Vertex &v2);
        bool isNull() const;
        std::size_t getId() const;
        std::shared_ptr<Graph> getGraph() const;
        std::size_t getDegree() const;
        IncidentEdgeRange incidentEdges() const;
        const std::string &getStringLabel() const;
        AtomId getAtomId() const;
        Charge getCharge() const;
        bool getRadical() const;
    private:
        std::shared_ptr<Graph> g;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Graph::Vertex

.. function:: Vertex()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::size_t getId() const

    :returns: the index of the vertex. It will be in the range :math:`[0, numVertices[`.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: std::shared_ptr<Graph> getGraph() const

    :returns: the graph the vertex belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: std::size_t getDegree() const

    :returns: the degree of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: IncidentEdgeRange incidentEdges() const

    :returns: a range of incident edges to this vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: const std::string &getStringLabel() const

    :returns: the string label of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: AtomId getAtomId() const

    :returns: the atom id of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Charge getCharge() const

    :returns: the charge of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: bool getRadical() const

    :returns: the radical status of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Graph::Edge``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::Edge
    

    A descriptor of either an edge in a graph, or a null edge.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Graph::Edge {
        friend class EdgeIterator;
        friend class IncidentEdgeIterator;
        Edge(std::shared_ptr<Graph> g, std::size_t vId, std::size_t eId);
    public:
        Edge();
        friend std::ostream &operator<<(std::ostream &s, const Edge &e);
        friend bool operator==(const Edge &e1, const Edge &e2);
        friend bool operator!=(const Edge &e1, const Edge &e2);
        friend bool operator<(const Edge &e1, const Edge &e2);
        bool isNull() const;
        std::shared_ptr<Graph> getGraph() const;
        Vertex source() const;
        Vertex target() const;
        const std::string &getStringLabel() const;
        BondType getBondType() const;
    private:
        std::shared_ptr<Graph> g;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Graph::Edge

.. function:: Edge()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::shared_ptr<Graph> getGraph() const

    :returns: the graph the edge belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Vertex source() const

    :returns: the source vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Vertex target() const

    :returns: the target vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: const std::string &getStringLabel() const

    :returns: the string label of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: BondType getBondType() const

    :returns: the bond type of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Graph::VertexIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::VertexIterator
    

    An iterator for traversing all vertices in a graph.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Graph::VertexIterator : public boost::iterator_facade<VertexIterator, Vertex, std::forward_iterator_tag, Vertex> {
        friend class Graph;
        VertexIterator(std::shared_ptr<Graph> g);
    public:
        VertexIterator();
    private:
        friend class boost::iterator_core_access;
        Vertex dereference() const;
        bool equal(const VertexIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Graph> g;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Graph::VertexIterator

.. function:: VertexIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Graph::VertexRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::VertexRange
    

    A range of all vertices in a graph.

Class ``Graph::EdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::EdgeIterator
    

    An iterator for traversing all edges in a graph.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Graph::EdgeIterator : public boost::iterator_facade<EdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Graph;
        EdgeIterator(std::shared_ptr<Graph> g);
    public:
        EdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const EdgeIterator &iter) const;
        void increment();
        void advanceToValid();
    private:
        std::shared_ptr<Graph> g;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Graph::EdgeIterator

.. function:: EdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Graph::EdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::EdgeRange
    

    A range of all edges in a graph.

Class ``Graph::IncidnetEdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::IncidnetEdgeIterator
    

    An iterator for traversing all edges in a graph.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Graph::IncidentEdgeIterator : public boost::iterator_facade<IncidentEdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Graph;
        IncidentEdgeIterator(std::shared_ptr<Graph> g, std::size_t vId);
    public:
        IncidentEdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const IncidentEdgeIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Graph> g;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Graph::IncidnetEdgeIterator

.. function:: IncidentEdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Graph::IncidentEdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Graph::IncidentEdgeRange
    

    A range of all incident edges to a vertex in a graph.
