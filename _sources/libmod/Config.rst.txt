.. _cpp-Config:

**********************************************************
Config.h
**********************************************************
.. default-domain:: cpp

.. py:currentmodule:: mod
.. cpp:namespace:: mod

.. _libmod-config:

This file defines configuration options for the library, e.g., for
changing the number of threads available for the ILP solver, or for
completely switching to another ILP solver.
Many of the options control verbosity of algorithms or which data to
output when printing figures.

.. function:: Config &getConfig()

    :returns: the singleton :cpp:class:`Config` instance used by the library.


Class ``template<typename T> ConfigSetting``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: template<typename T> ConfigSetting
    

    Holds a single option of type :cpp:any:`T`.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    template<typename T>
    struct ConfigSetting {
        ConfigSetting(T value, const std::string &name) : value(value), name(name) { }
        void set(T value) {
            this->value = value;
        };
        T get() const {
            return value;
        }
        const std::string &getName() const {
            return name;
        }
    private:
        T value;
        const std::string name;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: template<typename T> ConfigSetting

.. function:: void set(T value)

    Sets the configuration value.

.. function:: T get() const

    :returns: The configuration value.


.. cpp:namespace:: mod


Class ``Config``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Config
    

    Holds all configuration settings.

.. todo:: write documentation for all settings                      \
