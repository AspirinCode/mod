.. _cpp-RuleGraphInterface:

**********************************************************
RuleGraphInterface.h
**********************************************************
.. default-domain:: cpp

.. py:currentmodule:: mod
.. cpp:namespace:: mod

This header contains the defintinos for the graph interface for :cpp:class:`mod::Rule`.

========================================================================
Left
========================================================================


Class ``Rule::LeftGraph``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph
    

    A proxy object representing the left graph of the rule.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule where the graph belongs to.
.. function:: std::size_t numVertices() const

    :returns: the number of vertices in the graph.
.. function:: VertexRange vertices() const

    :returns: a range of all vertices in the graph.
.. function:: std::size_t numEdges() const

    :returns: the number of edges in the graph.
.. function:: EdgeRange edges() const

    :returns: a range of all edges in the graph.

Class ``Rule::LeftGraph::Vertex``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::Vertex
    

    A descriptor of either a vertex in a rule, or a null vertex.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::LeftGraph::Vertex {
        friend class Rule::Vertex;
        friend class LeftGraph;
        friend class Edge;
        friend class VertexIterator;
        friend class VertexRange;
        Vertex(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        Vertex();
        friend std::ostream &operator<<(std::ostream &s, const Vertex &v);
        friend bool operator==(const Vertex &v1, const Vertex &v2);
        friend bool operator!=(const Vertex &v1, const Vertex &v2);
        friend bool operator<(const Vertex &v1, const Vertex &v2);
        bool isNull() const;
        std::size_t getId() const;
        std::shared_ptr<Rule> getRule() const;
        Rule::Vertex getCore() const;
        std::size_t getDegree() const;
        IncidentEdgeRange incidentEdges() const;
        const std::string &getStringLabel() const;
        AtomId getAtomId() const;
        Charge getCharge() const;
        bool getRadical() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::LeftGraph::Vertex

.. function:: Vertex()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::size_t getId() const

    :returns: the index of the vertex. It will be in the range :math:`[0, numVertices[`.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the vertex belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Rule::Vertex getCore() const

    :returns: the descriptor for this vertex in the core graph.
.. function:: std::size_t getDegree() const

    :returns: the degree of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: IncidentEdgeRange incidentEdges() const

    :returns: a range of incident edges to this vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: const std::string &getStringLabel() const

    :returns: the string label of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: AtomId getAtomId() const

    :returns: the atom id of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Charge getCharge() const

    :returns: the charge of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: bool getRadical() const

    :returns: the radical status of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::LeftGraph::Edge``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::Edge
    

    A descriptor of either an edge in a rule, or a null edge.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::LeftGraph::Edge {
        friend class Rule::Edge;
        friend class EdgeIterator;
        friend class IncidentEdgeIterator;
        Edge(std::shared_ptr<Rule> r, std::size_t vId, std::size_t eId);
    public:
        Edge();
        friend std::ostream &operator<<(std::ostream &s, const Edge &e);
        friend bool operator==(const Edge &e1, const Edge &e2);
        friend bool operator!=(const Edge &e1, const Edge &e2);
        friend bool operator<(const Edge &e1, const Edge &e2);
        bool isNull() const;
        std::shared_ptr<Rule> getRule() const;
        Rule::Edge getCore() const;
        Vertex source() const;
        Vertex target() const;
        const std::string &getStringLabel() const;
        BondType getBondType() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::LeftGraph::Edge

.. function:: Edge()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the edge belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Rule::edge getCore() const

    :returns: the descriptor for this edge in the core graph.
.. function:: Vertex source() const

    :returns: the source vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Vertex target() const

    :returns: the target vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: const std::string &getStringLabel() const

    :returns: the string label of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: BondType getBondType() const

    :returns: the bond type of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::LeftGraph::VertexIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::VertexIterator
    

    An iterator for traversing all vertices in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::LeftGraph::VertexIterator : public boost::iterator_facade<VertexIterator, Vertex, std::forward_iterator_tag, Vertex> {
        friend class Rule;
        VertexIterator(std::shared_ptr<Rule> r);
    public:
        VertexIterator();
    private:
        friend class boost::iterator_core_access;
        Vertex dereference() const;
        bool equal(const VertexIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::LeftGraph::VertexIterator

.. function:: VertexIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::LeftGraph::VertexRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::VertexRange
    

    A range of all vertices in a rule.

Class ``Rule::LeftGraph::EdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::EdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::LeftGraph::EdgeIterator : public boost::iterator_facade<EdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        EdgeIterator(std::shared_ptr<Rule> r);
    public:
        EdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const EdgeIterator &iter) const;
        void increment();
        void advanceToValid();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::LeftGraph::EdgeIterator

.. function:: EdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::LeftGraph::EdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::EdgeRange
    

    A range of all edges in a rule.

Class ``Rule::LeftGraph::IncidnetEdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::IncidnetEdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::LeftGraph::IncidentEdgeIterator : public boost::iterator_facade<IncidentEdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        IncidentEdgeIterator(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        IncidentEdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const IncidentEdgeIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::LeftGraph::IncidnetEdgeIterator

.. function:: IncidentEdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::LeftGraph::IncidentEdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::LeftGraph::IncidentEdgeRange
    

    A range of all incident edges to a vertex in a rule.

========================================================================
Context
========================================================================


Class ``Rule::ContextGraph``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph
    

    A proxy object representing the context graph of the rule.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule where the graph belongs to.
.. function:: std::size_t numVertices() const

    :returns: the number of vertices in the graph.
.. function:: VertexRange vertices() const

    :returns: a range of all vertices in the graph.
.. function:: std::size_t numEdges() const

    :returns: the number of edges in the graph.
.. function:: EdgeRange edges() const

    :returns: a range of all edges in the graph.

Class ``Rule::ContextGraph::Vertex``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::Vertex
    

    A descriptor of either a vertex in a rule, or a null vertex.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::ContextGraph::Vertex {
        friend class Rule;
        friend class Edge;
        friend class VertexIterator;
        friend class VertexRange;
        Vertex(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        Vertex();
        friend std::ostream &operator<<(std::ostream &s, const Vertex &v);
        friend bool operator==(const Vertex &v1, const Vertex &v2);
        friend bool operator!=(const Vertex &v1, const Vertex &v2);
        friend bool operator<(const Vertex &v1, const Vertex &v2);
        bool isNull() const;
        std::size_t getId() const;
        std::shared_ptr<Rule> getRule() const;
        Rule::Vertex getCore() const;
        std::size_t getDegree() const;
        IncidentEdgeRange incidentEdges() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::ContextGraph::Vertex

.. function:: Vertex()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::size_t getId() const

    :returns: the index of the vertex. It will be in the range :math:`[0, numVertices[`.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the vertex belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Rule::Vertex getCore() const

    :returns: the descriptor for this vertex in the core graph.
.. function:: std::size_t getDegree() const

    :returns: the degree of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: IncidentEdgeRange incidentEdges() const

    :returns: a range of incident edges to this vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::ContextGraph::Edge``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::Edge
    

    A descriptor of either an edge in a rule, or a null edge.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::ContextGraph::Edge {
        friend class Rule::Edge;
        friend class EdgeIterator;
        friend class IncidentEdgeIterator;
        Edge(std::shared_ptr<Rule> r, std::size_t vId, std::size_t eId);
    public:
        Edge();
        friend std::ostream &operator<<(std::ostream &s, const Edge &e);
        friend bool operator==(const Edge &e1, const Edge &e2);
        friend bool operator!=(const Edge &e1, const Edge &e2);
        friend bool operator<(const Edge &e1, const Edge &e2);
        bool isNull() const;
        std::shared_ptr<Rule> getRule() const;
        Rule::Edge getCore() const;
        Vertex source() const;
        Vertex target() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::ContextGraph::Edge

.. function:: Edge()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the edge belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Rule::Edge getCore() const

    :returns: the descriptor for this edge in the core graph.
.. function:: Vertex source() const

    :returns: the source vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Vertex target() const

    :returns: the target vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::ContextGraph::VertexIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::VertexIterator
    

    An iterator for traversing all vertices in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::ContextGraph::VertexIterator : public boost::iterator_facade<VertexIterator, Vertex, std::forward_iterator_tag, Vertex> {
        friend class Rule;
        VertexIterator(std::shared_ptr<Rule> r);
    public:
        VertexIterator();
    private:
        friend class boost::iterator_core_access;
        Vertex dereference() const;
        bool equal(const VertexIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::ContextGraph::VertexIterator

.. function:: VertexIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::ContextGraph::VertexRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::VertexRange
    

    A range of all vertices in a rule.

Class ``Rule::ContextGraph::EdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::EdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::ContextGraph::EdgeIterator : public boost::iterator_facade<EdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        EdgeIterator(std::shared_ptr<Rule> r);
    public:
        EdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const EdgeIterator &iter) const;
        void increment();
        void advanceToValid();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::ContextGraph::EdgeIterator

.. function:: EdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::ContextGraph::EdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::EdgeRange
    

    A range of all edges in a rule.

Class ``Rule::ContextGraph::IncidnetEdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::IncidnetEdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::ContextGraph::IncidentEdgeIterator : public boost::iterator_facade<IncidentEdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        IncidentEdgeIterator(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        IncidentEdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const IncidentEdgeIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::ContextGraph::IncidnetEdgeIterator

.. function:: IncidentEdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::ContextGraph::IncidentEdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::ContextGraph::IncidentEdgeRange
    

    A range of all incident edges to a vertex in a rule.

========================================================================
Right
========================================================================


Class ``Rule::RightGraph``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph
    

    A proxy object representing the right graph of the rule.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule where the graph belongs to.
.. function:: std::size_t numVertices() const

    :returns: the number of vertices in the graph.
.. function:: VertexRange vertices() const

    :returns: a range of all vertices in the graph.
.. function:: std::size_t numEdges() const

    :returns: the number of edges in the graph.
.. function:: EdgeRange edges() const

    :returns: a range of all edges in the graph.

Class ``Rule::RightGraph::Vertex``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::Vertex
    

    A descriptor of either a vertex in a rule, or a null vertex.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::RightGraph::Vertex {
        friend class Rule;
        friend class Edge;
        friend class VertexIterator;
        friend class VertexRange;
        Vertex(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        Vertex();
        friend std::ostream &operator<<(std::ostream &s, const Vertex &v);
        friend bool operator==(const Vertex &v1, const Vertex &v2);
        friend bool operator!=(const Vertex &v1, const Vertex &v2);
        friend bool operator<(const Vertex &v1, const Vertex &v2);
        bool isNull() const;
        std::size_t getId() const;
        std::shared_ptr<Rule> getRule() const;
        Rule::Vertex getCore() const;
        std::size_t getDegree() const;
        IncidentEdgeRange incidentEdges() const;
        const std::string &getStringLabel() const;
        AtomId getAtomId() const;
        Charge getCharge() const;
        bool getRadical() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::RightGraph::Vertex

.. function:: Vertex()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::size_t getId() const

    :returns: the index of the vertex. It will be in the range :math:`[0, numVertices[`.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the vertex belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Rule::Vertex getCore() const

    :returns: the descriptor for this vertex in the core graph.
.. function:: std::size_t getDegree() const

    :returns: the degree of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: IncidentEdgeRange incidentEdges() const

    :returns: a range of incident edges to this vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: const std::string &getStringLabel() const

    :returns: the string label of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: AtomId getAtomId() const

    :returns: the atom id of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Charge getCharge() const

    :returns: the charge of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: bool getRadical() const

    :returns: the radical status of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::RightGraph::Edge``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::Edge
    

    A descriptor of either an edge in a rule, or a null edge.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::RightGraph::Edge {
        friend class Rule::Edge;
        friend class EdgeIterator;
        friend class IncidentEdgeIterator;
        Edge(std::shared_ptr<Rule> r, std::size_t vId, std::size_t eId);
    public:
        Edge();
        friend std::ostream &operator<<(std::ostream &s, const Edge &e);
        friend bool operator==(const Edge &e1, const Edge &e2);
        friend bool operator!=(const Edge &e1, const Edge &e2);
        friend bool operator<(const Edge &e1, const Edge &e2);
        bool isNull() const;
        std::shared_ptr<Rule> getRule() const;
        Rule::Edge getCore() const;
        Vertex source() const;
        Vertex target() const;
        const std::string &getStringLabel() const;
        BondType getBondType() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::RightGraph::Edge

.. function:: Edge()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the edge belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Rule::Edge getCore() const

    :returns: the descriptor for this edge in the core graph.
.. function:: Vertex source() const

    :returns: the source vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Vertex target() const

    :returns: the target vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: const std::string &getStringLabel() const

    :returns: the string label of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: BondType getBondType() const

    :returns: the bond type of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::RightGraph::VertexIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::VertexIterator
    

    An iterator for traversing all vertices in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::RightGraph::VertexIterator : public boost::iterator_facade<VertexIterator, Vertex, std::forward_iterator_tag, Vertex> {
        friend class Rule;
        VertexIterator(std::shared_ptr<Rule> r);
    public:
        VertexIterator();
    private:
        friend class boost::iterator_core_access;
        Vertex dereference() const;
        bool equal(const VertexIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::RightGraph::VertexIterator

.. function:: VertexIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::RightGraph::VertexRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::VertexRange
    

    A range of all vertices in a rule.

Class ``Rule::RightGraph::EdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::EdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::RightGraph::EdgeIterator : public boost::iterator_facade<EdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        EdgeIterator(std::shared_ptr<Rule> r);
    public:
        EdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const EdgeIterator &iter) const;
        void increment();
        void advanceToValid();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::RightGraph::EdgeIterator

.. function:: EdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::RightGraph::EdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::EdgeRange
    

    A range of all edges in a rule.

Class ``Rule::RightGraph::IncidnetEdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::IncidnetEdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::RightGraph::IncidentEdgeIterator : public boost::iterator_facade<IncidentEdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        IncidentEdgeIterator(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        IncidentEdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const IncidentEdgeIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::RightGraph::IncidnetEdgeIterator

.. function:: IncidentEdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::RightGraph::IncidentEdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::RightGraph::IncidentEdgeRange
    

    A range of all incident edges to a vertex in a rule.

========================================================================
Core
========================================================================


Class ``Rule::Vertex``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::Vertex
    

    A descriptor of either a vertex in a rule, or a null vertex.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::Vertex {
        friend class Rule;
        friend class Edge;
        friend class VertexIterator;
        friend class VertexRange;
        Vertex(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        Vertex();
        friend std::ostream &operator<<(std::ostream &s, const Vertex &v);
        friend bool operator==(const Vertex &v1, const Vertex &v2);
        friend bool operator!=(const Vertex &v1, const Vertex &v2);
        friend bool operator<(const Vertex &v1, const Vertex &v2);
        bool isNull() const;
        std::size_t getId() const;
        std::shared_ptr<Rule> getRule() const;
        LeftGraph::Vertex getLeft() const;
        ContextGraph::Vertex getContext() const;
        RightGraph::Vertex getRight() const;
        std::size_t getDegree() const;
        IncidentEdgeRange incidentEdges() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::Vertex

.. function:: Vertex()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::size_t getId() const

    :returns: the index of the vertex. It will be in the range :math:`[0, numVertices[`.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the vertex belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: LeftGraph::Vertex getLeft() const

    :returns: a null descriptor if this vertex is not in the left graph,
        otherwise the descriptor of this vertex in the left graph.
.. function:: ContextGraph::Vertex getContext() const

    :returns: a null descriptor if this vertex is not in the context graph,
        otherwise the descriptor of this vertex in the context graph.
.. function:: RightGraph::Vertex getRight() const

    :returns: a null descriptor if this vertex is not in the right graph,
        otherwise the descriptor of this vertex in the right graph.
.. function:: std::size_t getDegree() const

    :returns: the degree of the vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: IncidentEdgeRange incidentEdges() const

    :returns: a range of incident edges to this vertex.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::Edge``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::Edge
    

    A descriptor of either an edge in a rule, or a null edge.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::Edge {
        friend class Rule::LeftGraph::Edge;
        friend class Rule::ContextGraph::Edge;
        friend class Rule::RightGraph::Edge;
        friend class EdgeIterator;
        friend class IncidentEdgeIterator;
        Edge(std::shared_ptr<Rule> r, std::size_t vId, std::size_t eId);
    public:
        Edge();
        friend std::ostream &operator<<(std::ostream &s, const Edge &e);
        friend bool operator==(const Edge &e1, const Edge &e2);
        friend bool operator!=(const Edge &e1, const Edge &e2);
        friend bool operator<(const Edge &e1, const Edge &e2);
        bool isNull() const;
        std::shared_ptr<Rule> getRule() const;
        LeftGraph::Edge getLeft() const;
        ContextGraph::Edge getContext() const;
        RightGraph::Edge getRight() const;
        Vertex source() const;
        Vertex target() const;
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::Edge

.. function:: Edge()

    Constructs a null descriptor.
.. function:: bool isNull() const

    :returns: whether this is a null descriptor or not.
.. function:: std::shared_ptr<Rule> getRule() const

    :returns: the rule the edge belongs to.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: LeftGraph::Edge getLeft() const

    :returns: a null descriptor if this edge is not in the left graph,
        otherwise the descriptor of this edge in the left graph.
.. function:: ContextGraph::Edge getContext() const

    :returns: a null descriptor if this edge is not in the context graph,
        otherwise the descriptor of this edge in the context graph.
.. function:: RightGraph::Edge getRight() const

    :returns: a null descriptor if this edge is not in the right graph,
        otherwise the descriptor of this edge in the right graph.
.. function:: Vertex source() const

    :returns: the source vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.
.. function:: Vertex target() const

    :returns: the target vertex of the edge.
    :throws: :cpp:class:`LogicError` if it is a null descriptor.

.. cpp:namespace:: mod


Class ``Rule::VertexIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::VertexIterator
    

    An iterator for traversing all vertices in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::VertexIterator : public boost::iterator_facade<VertexIterator, Vertex, std::forward_iterator_tag, Vertex> {
        friend class Rule;
        VertexIterator(std::shared_ptr<Rule> r);
    public:
        VertexIterator();
    private:
        friend class boost::iterator_core_access;
        Vertex dereference() const;
        bool equal(const VertexIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::VertexIterator

.. function:: VertexIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::VertexRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::VertexRange
    

    A range of all vertices in a rule.

Class ``Rule::EdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::EdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::EdgeIterator : public boost::iterator_facade<EdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        EdgeIterator(std::shared_ptr<Rule> r);
    public:
        EdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const EdgeIterator &iter) const;
        void increment();
        void advanceToValid();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::EdgeIterator

.. function:: EdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::EdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::EdgeRange
    

    A range of all edges in a rule.

Class ``Rule::IncidnetEdgeIterator``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::IncidnetEdgeIterator
    

    An iterator for traversing all edges in a rule.
    It models a forward iterator.

Synopsis
^^^^^^^^

.. code-block:: c++
    
    class Rule::IncidentEdgeIterator : public boost::iterator_facade<IncidentEdgeIterator, Edge, std::forward_iterator_tag, Edge> {
        friend class Rule;
        IncidentEdgeIterator(std::shared_ptr<Rule> r, std::size_t vId);
    public:
        IncidentEdgeIterator();
    private:
        friend class boost::iterator_core_access;
        Edge dereference() const;
        bool equal(const IncidentEdgeIterator &iter) const;
        void increment();
    private:
        std::shared_ptr<Rule> r;
        std::size_t vId, eId;
    };

Details
^^^^^^^

.. cpp:namespace:: mod

.. cpp:namespace-push:: Rule::IncidnetEdgeIterator

.. function:: IncidentEdgeIterator()

    Construct a past-the-end iterator.

.. cpp:namespace:: mod


Class ``Rule::IncidentEdgeRange``
--------------------------------------------------------------------------------------------------------------------------------

.. class:: Rule::IncidentEdgeRange
    

    A range of all incident edges to a vertex in a rule.
