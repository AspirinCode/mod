.. _dgFlowCommon:

****************
Hyperflow Model
****************

The hyperflow model on derivation graphs accessible through
:cpp:class:`mod::DGFlow` (C++) and :py:class:`mod.DGFlow` (Python)
consists of many different variables and constraints.
This page is not meant to fully describe the model but to describe how the variables are available
in the C++ and Python interface.


Variable Specifiers
###################

The following information is common for both the C++ and Python interface. Though, in Python the specifiers are defined in module scope, while in C++ they are
defined in the namespace ``mod::DGFlowVar``. Thus, it may be useful to use the using-declaration ``using namespace mod::DGFlowVar;`` when defining linear expressions/constraints in C++.

Each defined specifier represents a sum of variables, and calling the specifier as a function
retrieves a specifier for a single variable (or a sum of a subset of the variables) as indicated by the argument.
E.g., ``inFlow`` represents the sum :math:`\sum_{v\in V}x^-_v` while ``inFlow(g)`` retrieves the specifier for
:math:`x^-_v` for where the graph ``g`` is represented by the vertex :math:`v` in the
underlying derivation graph :math:`\mathcal{H} = (V, E)`.

===================== ======================== ===================== ================================================================================================
Specifier             Argument to get detailed Extension             Description              
===================== ======================== ===================== ================================================================================================
``inFlow``            ``Graph``                Base                  The input flow variables, :math:`x^-_v`.
``outFlow``           ``Graph``                Base                  The output flow variables, :math:`x^+_v`.
``isInPositive``      ``Graph``                Base                  Indicator variables for :math:`x^-_v > 0`.
``isInLessOut``       ``Graph``                Base                  Indicator variables for :math:`x^-_v < x^+_v`.
``isInGreaterOut``    ``Graph``                Base                  Indicator variables for :math:`x^-_v > x^+_v`.
``isInOutZero``       ``Graph``                Base                  Indicator variables for :math:`x^-_v = x^+_v = 0`.
``vertex``            ``Graph``                Base                  Variables for flow through each vertex, :math:`\sum_{v\in V}\sum_{e\in \delta^-(v)} x_e`.
                                                                     The detailed variable specifier retrieves the inner sum for some :math:`v`.
``isVertexUsed``      ``Graph``                Base                  Indicator variables for :math:`\sum_{e\in \delta^-(v)} x_e`.
``isOverallAutocata`` ``Graph``                Overall autocatalysis Indicator variables for overall autocatalysis.
``isOverallCata``     ``Graph``                Overall catalysis     Indicator variables for overall catalysis.
``edge``              ``DerivationRef``        Base                  The edge flow variables, :math:`x_e`, without the input/output edges.
``isEdgeUsed``        ``DerivationRef``        Base                  Indicator variables for :math:`x_e > 0` for the non-input/output edges.
``isBothReverseUsed`` ``DerivationRef``        Base                  For each unique unordered pair of edges (not input/output)
                                                                     :math:`e_a = (S_a, T_a), e_b = (T_a, S_a)` there is an indicator variable indicating
                                                                     :math:`x_{e_a} > 0 \wedge x_{e_b} > 0`.
                                                                     The detailed specifier can only be retrieved if the given ``DerivationRef`` actually has
                                                                     a reverse. Two edges being each others reverse maps to the *same* detailed indicator variable.
===================== ======================== ===================== ================================================================================================


Objective Function
###################

The objective function is always minimised and can be changed to any linear expression.
The default objective function is determined by the enabled extensions.
Each extension will add some linear expression to the objective function if it is enabled.

===================== ====================================
Extension             Added Linear Expression
===================== ====================================
Base                  ``edge`` :math:`+` ``inFlow``
Transit               :math:`0`
Overall Autocatalysis ``isOverallAutocata``
Overall Catalysis     ``isOverallCata``
===================== ====================================
